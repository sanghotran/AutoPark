ARM GAS  /tmp/ccFAeXey.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f1xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/stm32f1xx_it.c"
  18              		.section	.text.NMI_Handler,"ax",%progbits
  19              		.align	1
  20              		.global	NMI_Handler
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	NMI_Handler:
  26              	.LFB68:
   1:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f1xx_it.c **** /**
   3:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Core/Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f1xx_it.c ****   * @attention
   8:Core/Src/stm32f1xx_it.c ****   *
   9:Core/Src/stm32f1xx_it.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/stm32f1xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f1xx_it.c ****   *
  12:Core/Src/stm32f1xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f1xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f1xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f1xx_it.c ****   *
  16:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f1xx_it.c ****   */
  18:Core/Src/stm32f1xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f1xx_it.c **** 
  20:Core/Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f1xx_it.c **** #include "main.h"
  22:Core/Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  23:Core/Src/stm32f1xx_it.c **** #include "auto_park.h"
  24:Core/Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Core/Src/stm32f1xx_it.c **** 
  28:Core/Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Core/Src/stm32f1xx_it.c **** 
  31:Core/Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Core/Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccFAeXey.s 			page 2


  33:Core/Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Core/Src/stm32f1xx_it.c **** 
  36:Core/Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Core/Src/stm32f1xx_it.c **** 
  38:Core/Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Core/Src/stm32f1xx_it.c **** 
  41:Core/Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Core/Src/stm32f1xx_it.c **** 
  43:Core/Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32f1xx_it.c **** 
  46:Core/Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Core/Src/stm32f1xx_it.c **** 
  48:Core/Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32f1xx_it.c **** 
  51:Core/Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Core/Src/stm32f1xx_it.c **** 
  53:Core/Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Core/Src/stm32f1xx_it.c **** 
  56:Core/Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Core/Src/stm32f1xx_it.c **** 
  58:Core/Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Core/Src/stm32f1xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_FS;
  60:Core/Src/stm32f1xx_it.c **** extern SPI_HandleTypeDef hspi1;
  61:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  62:Core/Src/stm32f1xx_it.c **** extern MACHINE machine;
  63:Core/Src/stm32f1xx_it.c **** 
  64:Core/Src/stm32f1xx_it.c **** /* USER CODE END EV */
  65:Core/Src/stm32f1xx_it.c **** 
  66:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
  67:Core/Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */
  68:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
  69:Core/Src/stm32f1xx_it.c **** /**
  70:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  71:Core/Src/stm32f1xx_it.c ****   */
  72:Core/Src/stm32f1xx_it.c **** void NMI_Handler(void)
  73:Core/Src/stm32f1xx_it.c **** {
  27              		.loc 1 73 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  74:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  75:Core/Src/stm32f1xx_it.c **** 
  76:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  77:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  78:Core/Src/stm32f1xx_it.c ****   while (1)
  34              		.loc 1 78 3 view .LVU1
  79:Core/Src/stm32f1xx_it.c ****   {
  80:Core/Src/stm32f1xx_it.c ****   }
  35              		.loc 1 80 3 view .LVU2
ARM GAS  /tmp/ccFAeXey.s 			page 3


  78:Core/Src/stm32f1xx_it.c ****   {
  36              		.loc 1 78 9 view .LVU3
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE68:
  41              		.section	.text.HardFault_Handler,"ax",%progbits
  42              		.align	1
  43              		.global	HardFault_Handler
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  48              	HardFault_Handler:
  49              	.LFB69:
  81:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  82:Core/Src/stm32f1xx_it.c **** }
  83:Core/Src/stm32f1xx_it.c **** 
  84:Core/Src/stm32f1xx_it.c **** /**
  85:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  86:Core/Src/stm32f1xx_it.c ****   */
  87:Core/Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  88:Core/Src/stm32f1xx_it.c **** {
  50              		.loc 1 88 1 view -0
  51              		.cfi_startproc
  52              		@ Volatile: function does not return.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.L4:
  89:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  90:Core/Src/stm32f1xx_it.c **** 
  91:Core/Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  92:Core/Src/stm32f1xx_it.c ****   while (1)
  57              		.loc 1 92 3 view .LVU5
  93:Core/Src/stm32f1xx_it.c ****   {
  94:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  95:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  96:Core/Src/stm32f1xx_it.c ****   }
  58              		.loc 1 96 3 view .LVU6
  92:Core/Src/stm32f1xx_it.c ****   {
  59              		.loc 1 92 9 view .LVU7
  60 0000 FEE7     		b	.L4
  61              		.cfi_endproc
  62              	.LFE69:
  64              		.section	.text.MemManage_Handler,"ax",%progbits
  65              		.align	1
  66              		.global	MemManage_Handler
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  71              	MemManage_Handler:
  72              	.LFB70:
  97:Core/Src/stm32f1xx_it.c **** }
  98:Core/Src/stm32f1xx_it.c **** 
  99:Core/Src/stm32f1xx_it.c **** /**
 100:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 101:Core/Src/stm32f1xx_it.c ****   */
 102:Core/Src/stm32f1xx_it.c **** void MemManage_Handler(void)
ARM GAS  /tmp/ccFAeXey.s 			page 4


 103:Core/Src/stm32f1xx_it.c **** {
  73              		.loc 1 103 1 view -0
  74              		.cfi_startproc
  75              		@ Volatile: function does not return.
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79              	.L6:
 104:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 105:Core/Src/stm32f1xx_it.c **** 
 106:Core/Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 107:Core/Src/stm32f1xx_it.c ****   while (1)
  80              		.loc 1 107 3 view .LVU9
 108:Core/Src/stm32f1xx_it.c ****   {
 109:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 110:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 111:Core/Src/stm32f1xx_it.c ****   }
  81              		.loc 1 111 3 view .LVU10
 107:Core/Src/stm32f1xx_it.c ****   {
  82              		.loc 1 107 9 view .LVU11
  83 0000 FEE7     		b	.L6
  84              		.cfi_endproc
  85              	.LFE70:
  87              		.section	.text.BusFault_Handler,"ax",%progbits
  88              		.align	1
  89              		.global	BusFault_Handler
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  94              	BusFault_Handler:
  95              	.LFB71:
 112:Core/Src/stm32f1xx_it.c **** }
 113:Core/Src/stm32f1xx_it.c **** 
 114:Core/Src/stm32f1xx_it.c **** /**
 115:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 116:Core/Src/stm32f1xx_it.c ****   */
 117:Core/Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 118:Core/Src/stm32f1xx_it.c **** {
  96              		.loc 1 118 1 view -0
  97              		.cfi_startproc
  98              		@ Volatile: function does not return.
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.L8:
 119:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 120:Core/Src/stm32f1xx_it.c **** 
 121:Core/Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 122:Core/Src/stm32f1xx_it.c ****   while (1)
 103              		.loc 1 122 3 view .LVU13
 123:Core/Src/stm32f1xx_it.c ****   {
 124:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 125:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 126:Core/Src/stm32f1xx_it.c ****   }
 104              		.loc 1 126 3 view .LVU14
 122:Core/Src/stm32f1xx_it.c ****   {
 105              		.loc 1 122 9 view .LVU15
ARM GAS  /tmp/ccFAeXey.s 			page 5


 106 0000 FEE7     		b	.L8
 107              		.cfi_endproc
 108              	.LFE71:
 110              		.section	.text.UsageFault_Handler,"ax",%progbits
 111              		.align	1
 112              		.global	UsageFault_Handler
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 117              	UsageFault_Handler:
 118              	.LFB72:
 127:Core/Src/stm32f1xx_it.c **** }
 128:Core/Src/stm32f1xx_it.c **** 
 129:Core/Src/stm32f1xx_it.c **** /**
 130:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 131:Core/Src/stm32f1xx_it.c ****   */
 132:Core/Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 133:Core/Src/stm32f1xx_it.c **** {
 119              		.loc 1 133 1 view -0
 120              		.cfi_startproc
 121              		@ Volatile: function does not return.
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.L10:
 134:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 135:Core/Src/stm32f1xx_it.c **** 
 136:Core/Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 137:Core/Src/stm32f1xx_it.c ****   while (1)
 126              		.loc 1 137 3 view .LVU17
 138:Core/Src/stm32f1xx_it.c ****   {
 139:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 140:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 141:Core/Src/stm32f1xx_it.c ****   }
 127              		.loc 1 141 3 view .LVU18
 137:Core/Src/stm32f1xx_it.c ****   {
 128              		.loc 1 137 9 view .LVU19
 129 0000 FEE7     		b	.L10
 130              		.cfi_endproc
 131              	.LFE72:
 133              		.section	.text.SVC_Handler,"ax",%progbits
 134              		.align	1
 135              		.global	SVC_Handler
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 140              	SVC_Handler:
 141              	.LFB73:
 142:Core/Src/stm32f1xx_it.c **** }
 143:Core/Src/stm32f1xx_it.c **** 
 144:Core/Src/stm32f1xx_it.c **** /**
 145:Core/Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 146:Core/Src/stm32f1xx_it.c ****   */
 147:Core/Src/stm32f1xx_it.c **** void SVC_Handler(void)
 148:Core/Src/stm32f1xx_it.c **** {
 142              		.loc 1 148 1 view -0
 143              		.cfi_startproc
ARM GAS  /tmp/ccFAeXey.s 			page 6


 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 149:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 150:Core/Src/stm32f1xx_it.c **** 
 151:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 152:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 153:Core/Src/stm32f1xx_it.c **** 
 154:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 155:Core/Src/stm32f1xx_it.c **** }
 147              		.loc 1 155 1 view .LVU21
 148 0000 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE73:
 152              		.section	.text.DebugMon_Handler,"ax",%progbits
 153              		.align	1
 154              		.global	DebugMon_Handler
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 159              	DebugMon_Handler:
 160              	.LFB74:
 156:Core/Src/stm32f1xx_it.c **** 
 157:Core/Src/stm32f1xx_it.c **** /**
 158:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 159:Core/Src/stm32f1xx_it.c ****   */
 160:Core/Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 161:Core/Src/stm32f1xx_it.c **** {
 161              		.loc 1 161 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 162:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 163:Core/Src/stm32f1xx_it.c **** 
 164:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 165:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 166:Core/Src/stm32f1xx_it.c **** 
 167:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 168:Core/Src/stm32f1xx_it.c **** }
 166              		.loc 1 168 1 view .LVU23
 167 0000 7047     		bx	lr
 168              		.cfi_endproc
 169              	.LFE74:
 171              		.section	.text.PendSV_Handler,"ax",%progbits
 172              		.align	1
 173              		.global	PendSV_Handler
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 178              	PendSV_Handler:
 179              	.LFB75:
 169:Core/Src/stm32f1xx_it.c **** 
 170:Core/Src/stm32f1xx_it.c **** /**
 171:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 172:Core/Src/stm32f1xx_it.c ****   */
 173:Core/Src/stm32f1xx_it.c **** void PendSV_Handler(void)
ARM GAS  /tmp/ccFAeXey.s 			page 7


 174:Core/Src/stm32f1xx_it.c **** {
 180              		.loc 1 174 1 view -0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 175:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 176:Core/Src/stm32f1xx_it.c **** 
 177:Core/Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 178:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 179:Core/Src/stm32f1xx_it.c **** 
 180:Core/Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 181:Core/Src/stm32f1xx_it.c **** }
 185              		.loc 1 181 1 view .LVU25
 186 0000 7047     		bx	lr
 187              		.cfi_endproc
 188              	.LFE75:
 190              		.section	.text.SysTick_Handler,"ax",%progbits
 191              		.align	1
 192              		.global	SysTick_Handler
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 197              	SysTick_Handler:
 198              	.LFB76:
 182:Core/Src/stm32f1xx_it.c **** 
 183:Core/Src/stm32f1xx_it.c **** /**
 184:Core/Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 185:Core/Src/stm32f1xx_it.c ****   */
 186:Core/Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 187:Core/Src/stm32f1xx_it.c **** {
 199              		.loc 1 187 1 view -0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203 0000 10B5     		push	{r4, lr}
 204              	.LCFI0:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 4, -8
 207              		.cfi_offset 14, -4
 188:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 189:Core/Src/stm32f1xx_it.c **** 	sample(&machine.up);
 208              		.loc 1 189 2 view .LVU27
 209 0002 074C     		ldr	r4, .L16
 210 0004 2046     		mov	r0, r4
 211 0006 FFF7FEFF 		bl	sample
 212              	.LVL0:
 190:Core/Src/stm32f1xx_it.c **** 	sample(&machine.roll);
 213              		.loc 1 190 2 view .LVU28
 214 000a 04F14C00 		add	r0, r4, #76
 215 000e FFF7FEFF 		bl	sample
 216              	.LVL1:
 191:Core/Src/stm32f1xx_it.c **** 	sample(&machine.out);
 217              		.loc 1 191 2 view .LVU29
 218 0012 04F19800 		add	r0, r4, #152
 219 0016 FFF7FEFF 		bl	sample
 220              	.LVL2:
ARM GAS  /tmp/ccFAeXey.s 			page 8


 192:Core/Src/stm32f1xx_it.c **** 
 193:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 194:Core/Src/stm32f1xx_it.c ****   HAL_IncTick();
 221              		.loc 1 194 3 view .LVU30
 222 001a FFF7FEFF 		bl	HAL_IncTick
 223              	.LVL3:
 195:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 196:Core/Src/stm32f1xx_it.c **** 
 197:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 198:Core/Src/stm32f1xx_it.c **** }
 224              		.loc 1 198 1 is_stmt 0 view .LVU31
 225 001e 10BD     		pop	{r4, pc}
 226              	.L17:
 227              		.align	2
 228              	.L16:
 229 0020 00000000 		.word	machine
 230              		.cfi_endproc
 231              	.LFE76:
 233              		.section	.text.USB_LP_CAN1_RX0_IRQHandler,"ax",%progbits
 234              		.align	1
 235              		.global	USB_LP_CAN1_RX0_IRQHandler
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 240              	USB_LP_CAN1_RX0_IRQHandler:
 241              	.LFB77:
 199:Core/Src/stm32f1xx_it.c **** 
 200:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 201:Core/Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 202:Core/Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 203:Core/Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 204:Core/Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 205:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 206:Core/Src/stm32f1xx_it.c **** 
 207:Core/Src/stm32f1xx_it.c **** /**
 208:Core/Src/stm32f1xx_it.c ****   * @brief This function handles USB low priority or CAN RX0 interrupts.
 209:Core/Src/stm32f1xx_it.c ****   */
 210:Core/Src/stm32f1xx_it.c **** void USB_LP_CAN1_RX0_IRQHandler(void)
 211:Core/Src/stm32f1xx_it.c **** {
 242              		.loc 1 211 1 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246 0000 08B5     		push	{r3, lr}
 247              	.LCFI1:
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 3, -8
 250              		.cfi_offset 14, -4
 212:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
 213:Core/Src/stm32f1xx_it.c **** 
 214:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
 215:Core/Src/stm32f1xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_FS);
 251              		.loc 1 215 3 view .LVU33
 252 0002 0248     		ldr	r0, .L20
 253 0004 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 254              	.LVL4:
 216:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
ARM GAS  /tmp/ccFAeXey.s 			page 9


 217:Core/Src/stm32f1xx_it.c **** 
 218:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
 219:Core/Src/stm32f1xx_it.c **** }
 255              		.loc 1 219 1 is_stmt 0 view .LVU34
 256 0008 08BD     		pop	{r3, pc}
 257              	.L21:
 258 000a 00BF     		.align	2
 259              	.L20:
 260 000c 00000000 		.word	hpcd_USB_FS
 261              		.cfi_endproc
 262              	.LFE77:
 264              		.section	.text.SPI1_IRQHandler,"ax",%progbits
 265              		.align	1
 266              		.global	SPI1_IRQHandler
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 271              	SPI1_IRQHandler:
 272              	.LFB78:
 220:Core/Src/stm32f1xx_it.c **** 
 221:Core/Src/stm32f1xx_it.c **** /**
 222:Core/Src/stm32f1xx_it.c ****   * @brief This function handles SPI1 global interrupt.
 223:Core/Src/stm32f1xx_it.c ****   */
 224:Core/Src/stm32f1xx_it.c **** void SPI1_IRQHandler(void)
 225:Core/Src/stm32f1xx_it.c **** {
 273              		.loc 1 225 1 is_stmt 1 view -0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277 0000 08B5     		push	{r3, lr}
 278              	.LCFI2:
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 3, -8
 281              		.cfi_offset 14, -4
 226:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SPI1_IRQn 0 */
 227:Core/Src/stm32f1xx_it.c **** 
 228:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SPI1_IRQn 0 */
 229:Core/Src/stm32f1xx_it.c ****   HAL_SPI_IRQHandler(&hspi1);
 282              		.loc 1 229 3 view .LVU36
 283 0002 0248     		ldr	r0, .L24
 284 0004 FFF7FEFF 		bl	HAL_SPI_IRQHandler
 285              	.LVL5:
 230:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SPI1_IRQn 1 */
 231:Core/Src/stm32f1xx_it.c **** 
 232:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SPI1_IRQn 1 */
 233:Core/Src/stm32f1xx_it.c **** }
 286              		.loc 1 233 1 is_stmt 0 view .LVU37
 287 0008 08BD     		pop	{r3, pc}
 288              	.L25:
 289 000a 00BF     		.align	2
 290              	.L24:
 291 000c 00000000 		.word	hspi1
 292              		.cfi_endproc
 293              	.LFE78:
 295              		.text
 296              	.Letext0:
 297              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
ARM GAS  /tmp/ccFAeXey.s 			page 10


 298              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 299              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 300              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 301              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 302              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 303              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 304              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usb.h"
 305              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pcd.h"
 306              		.file 11 "lib/auto_park.h"
 307              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccFAeXey.s 			page 11


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_it.c
     /tmp/ccFAeXey.s:19     .text.NMI_Handler:00000000 $t
     /tmp/ccFAeXey.s:25     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/ccFAeXey.s:42     .text.HardFault_Handler:00000000 $t
     /tmp/ccFAeXey.s:48     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/ccFAeXey.s:65     .text.MemManage_Handler:00000000 $t
     /tmp/ccFAeXey.s:71     .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/ccFAeXey.s:88     .text.BusFault_Handler:00000000 $t
     /tmp/ccFAeXey.s:94     .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/ccFAeXey.s:111    .text.UsageFault_Handler:00000000 $t
     /tmp/ccFAeXey.s:117    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/ccFAeXey.s:134    .text.SVC_Handler:00000000 $t
     /tmp/ccFAeXey.s:140    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/ccFAeXey.s:153    .text.DebugMon_Handler:00000000 $t
     /tmp/ccFAeXey.s:159    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/ccFAeXey.s:172    .text.PendSV_Handler:00000000 $t
     /tmp/ccFAeXey.s:178    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/ccFAeXey.s:191    .text.SysTick_Handler:00000000 $t
     /tmp/ccFAeXey.s:197    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/ccFAeXey.s:229    .text.SysTick_Handler:00000020 $d
     /tmp/ccFAeXey.s:234    .text.USB_LP_CAN1_RX0_IRQHandler:00000000 $t
     /tmp/ccFAeXey.s:240    .text.USB_LP_CAN1_RX0_IRQHandler:00000000 USB_LP_CAN1_RX0_IRQHandler
     /tmp/ccFAeXey.s:260    .text.USB_LP_CAN1_RX0_IRQHandler:0000000c $d
     /tmp/ccFAeXey.s:265    .text.SPI1_IRQHandler:00000000 $t
     /tmp/ccFAeXey.s:271    .text.SPI1_IRQHandler:00000000 SPI1_IRQHandler
     /tmp/ccFAeXey.s:291    .text.SPI1_IRQHandler:0000000c $d

UNDEFINED SYMBOLS
sample
HAL_IncTick
machine
HAL_PCD_IRQHandler
hpcd_USB_FS
HAL_SPI_IRQHandler
hspi1
